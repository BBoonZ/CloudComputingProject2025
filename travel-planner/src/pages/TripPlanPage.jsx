import React, { useState, useEffect, use } from "react";
import { Link } from "react-router-dom";
import { useLocation, useNavigate } from "react-router-dom";
import EditTripModal from "../component/popup-editTripPlan";
import ShareTripModal from "../component/popup-shareTripPlan";
import ActivityTripModal from "../component/popup-ActivityTripModal";
import nav from "../css/main-nav.module.css";
import plantemp from "../css/tripTemplate.module.css";
import styles from "../css/tripPlan.module.css";

export default function TripPlanPage() {

    const navigate = useNavigate();
    const location = useLocation();
    const params = new URLSearchParams(location.search);
    const room_id = params.get("room_id");
    // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö modal ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const [editModalOpen, setEditModalOpen] = useState(false);
    const [shareModalOpen, setShareModalOpen] = useState(false);
    const [addActivityModalOpen, setAddActivityModalOpen] = useState(false);
    const [editActivityModalOpen, setEditActivityModalOpen] = useState(false);
    const [trip, setTrip] = useState(null);
    const [trips, setTrips] = useState([]);
    const [totaldate, setTotaldate] = useState([]);
    const [totalDays, setTotalDays] = useState(0);
    const [selectDate, setSelectedDate] = useState(null);
    const [description, setDescription] = useState("");
    const [title, setTitle] = useState("");
    const [selectedActivity, setSelectedActivity] = useState(null);
    const [shareStatus, setShareStatus] = useState("‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    const [isShared, setIsShared] = useState(false); // ‡πÉ‡∏ä‡πâ boolean
    const [shareLoading, setShareLoading] = useState(false);

   


    const handleDeleteActivity = async (itineraryId) => {
        // 1. ‡∏ñ‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
        if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ?")) {
            return;
        }

        try {
            // 2. ‡∏¢‡∏¥‡∏á API "DELETE"
            const response = await fetch(`http://localhost:3001/deleteActivity/${itineraryId}`, {
                method: "DELETE",
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to delete activity');
            }

            // 3. (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!) ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å State ‡πÄ‡∏≠‡∏á ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á reload ‡∏´‡∏ô‡πâ‡∏≤
            setTrips(currentTrips => {
                // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô (Days)
                return currentTrips.map(day => {
                    // ‡∏Å‡∏£‡∏≠‡∏á Activity ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
                    const updatedActivities = day.activities.filter(
                        act => act.itinerary_id !== itineraryId
                    );

                    return {
                        ...day,
                        activities: updatedActivities
                    };
                });
            });

            alert("‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

        } catch (err) {
            console.error("Error deleting activity:", err);
            alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`);
        }
    };

    const generateTripDays = (startDateStr, endDateStr) => {
        const start = new Date(startDateStr);
        const end = new Date(endDateStr);
        const days = [];
        let current = new Date(start);

        let dayCount = 1;

        while (current <= end) {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô "1 ‡∏ò.‡∏Ñ." ‡πÄ‡∏ä‡πà‡∏ô‡πÄ‡∏î‡∏¥‡∏°
            const options = { day: 'numeric', month: 'short' };
            const dateText = current.toLocaleDateString('th-TH', options);
            const realdate = current.toISOString().split("T")[0]

            days.push({
                day: dayCount,
                date: dateText,
                real: realdate,
                activities: [] // ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡πà‡∏≤‡∏á ‡πÜ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å API
            });

            // ‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            current.setDate(current.getDate() + 1);
            dayCount++;
        }
        return days;
    };

    useEffect(() => {
        // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏¥‡∏õ‡∏´‡∏•‡∏±‡∏Å (‡∏ä‡∏∑‡πà‡∏≠, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
        fetch(`http://localhost:3001/trip_detail?room_id=${room_id}`)
            .then((res) => res.json())
            .then((tripData) => {
                setTrip(tripData);
                setTitle(tripData.title);           // <-- ‡∏ú‡∏°‡πÅ‡∏Å‡πâ bug ‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡πâ
                setDescription(tripData.description); // <-- ‡∏ú‡∏°‡πÅ‡∏Å‡πâ bug ‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡πâ

                // 2. ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö
                if (tripData && tripData.start_date && tripData.end_date) {
                    // 2.1 ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏ß‡∏±‡∏ô" ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÜ (‡πÇ‡∏Ñ‡∏£‡∏á)
                    const daysArray = generateTripDays(tripData.start_date, tripData.end_date);

                    // 2.2 ‡∏î‡∏∂‡∏á "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" (‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤)
                    fetch(`http://localhost:3001/itineraries/${room_id}`)
                        .then(res => res.json())
                        .then(apiActivities => {

                            // 2.3 ‡πÄ‡∏≠‡∏≤ "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤" ‡∏°‡∏≤‡∏¢‡∏±‡∏î‡πÉ‡∏™‡πà "‡πÇ‡∏Ñ‡∏£‡∏á"
                            const populatedDays = daysArray.map(day => {
                                // ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                                const activitiesForThisDay = apiActivities.filter(
                                    act => act.date === day.real // day.real ‡∏Ñ‡∏∑‡∏≠ "YYYY-MM-DD"
                                );

                                return {
                                    ...day,
                                    activities: activitiesForThisDay // ‡∏¢‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏ó‡∏±‡∏ö array ‡∏ß‡πà‡∏≤‡∏á
                                };
                            });

                            setTrips(populatedDays); // <-- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
                        })
                        .catch(err => console.error("Error fetching activities:", err));

                }
            })
            .catch((err) => console.error(err));

        document.body.style.backgroundColor = "";
        return () => { document.body.style.backgroundColor = "#f5f5f5"; }

    }, [room_id]);

    console.log(trip);
    console.log(totalDays);
    // const startDate = new Date(trip.start_date);
    // const endDate = new Date(trip.end_date);
    // const diffTime = endDate - startDate; // ‡∏´‡∏£‡∏∑‡∏≠ endDate.getTime() - startDate.getTime()

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô
    // const diffDays = diffTime / (1000 * 60 * 60 * 24) + 1; // +1 ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏î‡πâ‡∏ß‡∏¢

    // console.log(diffDays); // 6

    // const trips = [
    //     {
    //         day: 1,
    //         date: "1 ‡∏ò.‡∏Ñ.",
    //         activities: [
    //             {
    //                 title: "‡∏ñ‡∏∂‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
    //                 time: "9:00",
    //                 location: "‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
    //                 mapLink: "https://maps.google.com/?q=Chiang+Mai+Airport",
    //                 details: [
    //                     "‚úà ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‡∏™‡∏∏‡∏ß‡∏£‡∏£‡∏ì‡∏†‡∏π‡∏°‡∏¥ (BKK) ‚Üí ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà (CNX)",
    //                     "‚è± ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 15 ‡∏ô‡∏≤‡∏ó‡∏µ",
    //                     "üõÑ ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏î‡∏£‡∏ñ‡∏ï‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 20 ‡∏ô‡∏≤‡∏ó‡∏µ"
    //                 ]
    //             },
    //             {
    //                 title: "‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô ‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢‡∏•‡∏∏‡∏á‡∏õ‡πâ‡∏≤",
    //                 time: "12:30",
    //                 location: "‡∏ñ‡∏ô‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®",
    //                 mapLink: "https://maps.google.com/?q=Khao+Soi+Lung+Pa+Restaurant",
    //                 details: [
    //                     "üç¥ ‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢‡∏•‡∏∏‡∏á‡∏õ‡πâ‡∏≤",
    //                     "‚≠ê ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢‡πÑ‡∏Å‡πà, ‡∏Ç‡∏ô‡∏°‡∏à‡∏µ‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏µ‡πâ‡∏¢‡∏ß",
    //                     "üí∞ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: 80‚Äì150 ‡∏ö‡∏≤‡∏ó/‡∏Ñ‡∏ô",
    //                     "üìù ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡πá‡∏Å ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏¥‡∏ß"
    //                 ]
    //             }
    //         ]
    //     },
    //     {
    //         day: 2,
    //         date: "2 ‡∏ò.‡∏Ñ.",
    //         activities: [
    //             {
    //                 title: "‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û",
    //                 time: "10:00",
    //                 location: "‡∏™‡∏∏‡πÄ‡∏ó‡∏û, ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
    //                 mapLink: "#",
    //                 details: [
    //                     "üöå ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û (‡∏£‡∏ñ‡∏™‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß/‡∏£‡∏ñ‡∏ï‡∏π‡πâ)",
    //                     "‚è± ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 30‚Äì40 ‡∏ô‡∏≤‡∏ó‡∏µ",
    //                     "üí∞ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°: 30 ‡∏ö‡∏≤‡∏ó (‡∏ä‡∏≤‡∏ß‡∏ï‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ï‡∏¥)",
    //                     "üìù ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏´‡∏ß‡πâ‡∏û‡∏£‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"
    //                 ]
    //             }
    //         ]
    //     }
    // ];

    return (
        <>
            <header className={nav.header}>
                <div className={nav.container}>
                    <div className={nav.logo}>
                        <Link to="/tripMain">Travel Planner Pro ‚úàÔ∏è</Link>
                    </div>
                    <nav className={nav.mainNav}>
                        <ul>
                            <li><Link to="/tripMain">‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</Link></li>
                            <li><Link to="/tripManage">‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</Link></li>
                            <li>
                                <img
                                    src="https://travel-planner-profile-uploads-ab7bb12a.s3.us-east-1.amazonaws.com/istockphoto-1196083861-612x612.jpg"
                                    alt="User Profile"
                                    className={nav.profilePic}
                                    onClick={() => window.location.href = "/user"}
                                />
                            </li>
                        </ul>
                    </nav>
                </div>
            </header>

            <main className={plantemp.tripPlanMain}>
                <div className={plantemp.container}>
                    <div className={plantemp.planHeader}>
                        <h1>{title}</h1>
                        <div className={plantemp.planMeta}>
                            <span className={plantemp.planDates}></span>
                            <button className={`${plantemp.btn} ${plantemp.btnSave}`} onClick={() => setEditModalOpen(true)}>
                                <i className="fas fa-edit"></i> ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                            </button>
                            <button className={`${plantemp.btn} ${plantemp.btnShare}`}>
                                <i className="fas fa-share-alt"></i> {shareStatus}
                            </button>
                        </div>
                    </div>
                    <div class={plantemp.info}>
                        <div class={plantemp.container}>
                            <p>{description}</p>
                        </div>
                    </div>
                    <div className={plantemp.planLayout}>
                        <aside className={plantemp.planSidebar}>
                            <div className={`${plantemp.sidebarItem} ${plantemp.active}`}>
                                <i className="fas fa-calendar-alt"></i> ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
                            </div>
                            <div className={plantemp.sidebarItem} onClick={() => navigate(`/tripBudget?room_id=${room_id}`, {
                                state: {
                                    tripTitle: title,
                                    tripDescription: description,
                                    trip: trip
                                }
                            })}>
                                <i className="fas fa-wallet"></i> ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
                            </div>
                            <div className={plantemp.sidebarItem} onClick={() => navigate(`/tripTeam?room_id=${room_id}`, {
                                state: {
                                    tripTitle: title,
                                    tripDescription: description,
                                    trip: trip
                                }
                            })}>
                                <i className="fas fa-users"></i> ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å & ‡πÅ‡∏ä‡∏ó
                            </div>
                            <div className={plantemp.sidebarItem} onClick={() => navigate(`/tripFolder?room_id=${room_id}`, {
                                state: {
                                    tripTitle: title,
                                    tripDescription: description,
                                    trip: trip
                                }
                            })}>
                                <i className="fas fa-file-alt"></i> ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
                            </div>
                        </aside>

                        <div className={styles.planContent}>
                            <div className={styles.itineraryView}>
                                {/* ... ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô <div className={styles.itineraryView}> ... */}

                                {trips.map((tripDay, idx) => (
                                    <div key={idx} className={styles.itineraryDay}>
                                        <h3 className={styles.dayTitle}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {tripDay.day} <span className={styles.dateText}>({tripDay.date})</span></h3>
                                        <div className={styles.dayActivities}>

                                            {/* ‚ñº‚ñº‚ñº ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‚ñº‚ñº‚ñº */}

                                            {/* 3. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ activities ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å API */}
                                            {tripDay.activities.map((act) => (
                                                <div key={act.itinerary_id} className={styles.activityCard}>
                                                    <div className={styles.activityInfo}>
                                                        <h4>
                                                            <i className="fas fa-plane-arrival"></i> {act.title}{" "}

                                                            {/* 3.1 ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ link map ‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• */}
                                                            {act.map && (
                                                                <a href={act.map} target="_blank" rel="noopener noreferrer">[‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà]</a>
                                                            )}
                                                        </h4>

                                                        {/* 3.2 ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• */}
                                                        {act.time && <p className={styles.activityTime}>{act.time.substring(0, 5)}</p>}
                                                        {act.location && <p className={styles.activityLocation}>{act.location}</p>}

                                                        <div className={styles.activityDetail}>
                                                            <ul>
                                                                {/* 3.3 ‡∏ß‡∏ô‡∏•‡∏π‡∏õ details ‡∏à‡∏≤‡∏Å Model ‡∏ó‡∏µ‡πà include ‡∏°‡∏≤ */}
                                                                {act.ItineraryDetails && act.ItineraryDetails.map((detail, j) => (
                                                                    <li key={j}>{detail.description}</li>
                                                                ))}
                                                            </ul>
                                                        </div>
                                                    </div>
                                                    <div className={styles.activityActions}>
                                                        <button className={styles.btnEdit} onClick={() => {
                                                            setSelectedActivity(act); // <-- 2. ‡∏à‡∏≥‡∏ß‡πà‡∏≤‡πÅ‡∏Å‡πâ‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô
                                                            setEditActivityModalOpen(true);
                                                        }}>
                                                            <i className="fas fa-edit"></i>
                                                        </button>
                                                        <button
                                                            className={styles.btnDelete}
                                                            onClick={() => handleDeleteActivity(act.itinerary_id)}
                                                        >
                                                            <i className="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            ))}
                                            {/* ‚ñ≤‚ñ≤‚ñ≤ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚ñ≤‚ñ≤‚ñ≤ */}

                                            <button className={styles.btnAddActivity} onClick={() => { setSelectedDate(tripDay.real); setAddActivityModalOpen(true); }}>
                                                <i className="fas fa-plus"></i> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° {tripDay.real}
                                            </button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
            </main>

            {/* Edit Modal */}
            <EditTripModal
                isOpen={editModalOpen}
                onClose={() => setEditModalOpen(false)}
                initialData={trip} // <-- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏¥‡∏õ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                roomId={room_id}
            />

            {/* Share Modal */}
            <ShareTripModal
                isOpen={shareModalOpen}
                onClose={() => setShareModalOpen(false)}
            />

            {/* Add Activity Modal */}
            <ActivityTripModal
                type="add"
                open={addActivityModalOpen}
                onClose={() => setAddActivityModalOpen(false)}
                date={selectDate}
                room_id={room_id}
            />

            {/* Edit Activity Modal */}
            <ActivityTripModal
                type="edit"
                open={editActivityModalOpen}
                onClose={() => {
                    setEditActivityModalOpen(false);
                    setSelectedActivity(null); // <-- 3. ‡∏û‡∏≠‡∏õ‡∏¥‡∏î‡∏Å‡πá‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤
                }}
                editData={selectedActivity} // <-- 4. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏õ
            />
        </>
    );
}
